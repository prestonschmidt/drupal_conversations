<?php

use Drupal\Core\Access\AccessResult;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Form\FormStateInterface;

function drupal_conversations_theme($existing, $type, $theme, $path) {
    
    return [
        'node__conversation' => [
          'template' => 'node--conversation',
          'base hook' => 'node',
        ],
        'node__conversation__teaser' => [
          'template' => 'node--conversation--teaser',
          'base hook' => 'node',
        ],
        'node__conversation__token' => [
          'template' => 'node--conversation--token',
          'base hook' => 'node',
        ],
        'field__field_conversation_comment' => [
          'template' => 'field--field-conversation-comment',
          'base hook' => 'field',
        ],
        'field__field_recipient' => [
          'template' => 'field--field-recipient',
          'base hook' => 'field',
        ],
        'comment__field_conversation_comment' => [
          'template' => 'comment--field-conversation-comment',
          'base hook' => 'field',
        ],
      ];
    
}









function drupal_conversations_preprocess_node(&$variables) {

    //Check if this node is of type 'Conversation'
    if ($variables['node']->bundle() == 'conversation') {
        
        $currentUserUID = \Drupal::currentUser()->id();
        $recipients = $variables['node']->get('field_recipient')->getValue();
        $conversationUserList = array();
        
        foreach ($recipients as $recipient) {

            if ($recipient['target_id'] != $currentUserUID) {
                $conversationUserList[] = \Drupal\user\Entity\User::load($recipient['target_id']);
            }
            
        }
        
        if ($variables['node']->getOwnerId() != $currentUserUID) {
            $conversationUserList[] = \Drupal\user\Entity\User::load($variables['node']->getOwnerId());
        }

        $variables['conversationUserList'] = \Drupal::entityTypeManager()->getViewBuilder('user')->viewMultiple($conversationUserList, 'compact');
        
    }
            
}









//** Ensure only the node owner and referenced users can access Conversation entities
//** Adds rows to the "node_access" table
function drupal_conversations_node_access_records(NodeInterface $node) {
    
    //Check if this node is of type 'Conversation'
    if ($node->bundle() == 'conversation') {
        
        //Get referenced users
        $recipients = $node->get('field_recipient')->getValue();
        $grants = array();
        
        if ($node->isPublished()) {
            
            foreach ($recipients as $recipient) {

                //Create "view" access for referenced users
                $grants[] = array(
                    'realm' => 'drupal_conversations',
                    'gid' => $recipient['target_id'],
                    'grant_view' => 1,
                    'grant_update' => 0,
                    'grant_delete' => 0,
                    'langcode' => 'en',
                );

            }
            
        }
        
        if ($node->getOwnerId()) {
            //Create "view and update" access for node owner
            $grants[] = array(
                'realm' => 'drupal_conversations_owner',
                'gid' => $node->getOwnerId(),
                'grant_view' => 1,
                'grant_update' => 1,
                'grant_delete' => 0,
                'langcode' => 'en',
            );
        }
        
        //Create "full" access for administrator
        $grants[] = array(
            'realm' => 'drupal_conversations_admin',
            'gid' => 0, // This is the admin GID, not the $account->uid associated with anonymous
            'grant_view' => 1,
            'grant_update' => 1,
            'grant_delete' => 1,
            'langcode' => 'en',
        );
        
        return $grants;

    }
 
}

function drupal_conversations_node_grants(AccountInterface $account, $op) {
    
    $grants = array();
    
    //Apply view access to referenced users
    $grants['drupal_conversations'] = array(
        $account->id(),
    );
    
    //Apply view and update access to node owner
    $grants['drupal_conversations_owner'] = array(
        $account->id(),
    );
    
    //Always give administrator full access
    if (in_array('administrator', $account->getRoles())) {
        // gid to view, update, delete
        $grants['drupal_conversations_admin'][] = 0;
        return $grants;
    }
    
    return $grants;
    
}









// Extra safeguard. Controll access to conversation nodes to those who created the node or are referenced to the node
/**** Problem: Views ignores HOOK_node_access(). This is just a backup ****/
function drupal_conversations_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
    
    //Check if this node is of type 'Conversation'
    if ($node->bundle() == 'conversation') {
        $recipients = $node->get('field_recipient')->getValue();
        $currentUserID = \Drupal::currentUser()->id();

        //Check if there are recipients
        if (!empty($recipients)) {

            foreach ($recipients as $recipient) {

                //Validate referenced users ID's, and node owner ID, to allow access
                if ($recipient['target_id'] == $account->id() || $currentUserID == $node->getOwnerId()) {
                    return AccessResult::allowed()->cachePerUser()->cacheUntilEntityChanges($node);
                }

            }

        }

        //Deny access
        return AccessResult::forbidden()->cachePerUser()->cacheUntilEntityChanges($node);

    }

    //Not a Conversation node, proceed with normal access permissions
    return AccessResult::neutral();
    
}









function drupal_conversations_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

    $nodeAddForm = $form_state->getFormObject()->getEntity();
    
    if ($nodeAddForm->isNew() && $form_id == 'node_conversation_form') {

        //Add custom form elements
        $form['drupal_conversations_heading'] = [
            '#type' => 'item',
            '#weight' => -10,
            '#markup' => t('<h2>Add recipient(s), then start your conversation.</h2>'),
        ];
        
        //Call the node_builder function
        $form['title']['#access'] = FALSE;
        $form['#entity_builders'][] = 'drupal_conversations_node_builder';
        
        //Change the add user button text
        if ( isset($form['field_recipient']['widget']['add_more']['#value']) ) {
           $form['field_recipient']['widget']['add_more']['#value'] = t('Add another recipient');
        }
        
        //Change the submit button text
        if ( isset($form['actions']['submit']) ) {
           $form['actions']['submit']['#value'] = t('Start Conversation');
        }
                
    }
    else {
        // This is not a new node.
    }
    
}









function drupal_conversations_node_builder($entity_type, NodeInterface $node, $form, FormStateInterface $form_state) {
    
    $recipients = $node->field_recipient->getValue();
    $recipientIDList = '';
    foreach ($recipients as $recipient) {
        $recipientIDList .= '_' . $recipient['target_id'];
    }
    
    $node->setTitle('conversation_' . \Drupal::currentUser()->id() . $recipientIDList);

}









?>